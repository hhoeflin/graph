useDynLib(graph)

import(methods, cluster)

importFrom(Ruuid, getuuid)
importClassesFrom(Ruuid, Ruuid, uuidt)
importMethodsFrom(Ruuid, uuid)
exportClasses(Ruuid, uuidt)

exportClasses(gNode, gEdge, simpleEdge, hashtable, generalGraph, distGraph,
  clusterGraph, graphH, graph, graphNEL, file, connection,
  propertyHolder, graphAM, attrData) 

exportMethods(DFS, Dist, acc, addEdge, addNode, adj, asGraphProperty,
      bNode, clearNode, clusteringCoefficient, combineNodes, complement,
      connComp, degree, dumpGXL, eNode, edgeID, edgeL, edgeMatrix, edgeNames,
      edgeOrder, edgeWeights, edgemode, "edgemode<-", edges, fromEdges,
      "fromEdges<-", "toEdges<-", "nodes<-", fromGXL, getNodes, hash, idstring,
      inEdges, initialize, intersection, intersection2, intersection3,
      isAdjacent, isConnected, isDirected, join, label, nodeID, nodeType, nodes,
      numNodes, numEdges, property, "property<-", removeEdge,
      removeNode, show, subGraph, threshold, toEdges, toGXL, union, validateGXL,
      coerce, toDotR, attrDefaults, "attrDefaults<-", edgeDataDefaults,
      "edgeDataDefaults<-", nodeDataDefaults, "nodeDataDefaults<-", edgeData,
      "edgeData<-", nodeData, "nodeData<-", attrDataItem, "attrDataItem<-")


export(boundary, buildRepDepGraph, hashtable, calcProb, calcSumProb,
       duplicatedEdges, graph2SparseM, listEdges,
       randomEGraph, randomGraph, randomNodeGraph, ugraph,
       validGraph, eWV, pathWeights, .dropEdges, 
       aveNumEdges, sparseM2Graph, gxlTreeNEL,
       ftM2adjM, ftM2graphNEL, .ftM2other, int2ftM, 
       ftM2int, aM2bpG, mostEdges, numNoEdges) 


S3method(write,tlp)


